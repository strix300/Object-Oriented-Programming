#include<iostream>
#include<fstream>
#include<string>
#include<cstdio>

using namespace std;


class Product {
private:
	unsigned int index;
public:
		
protected:
	void setindex(unsigned int n) {
		this->index = n;
	}
	unsigned int getindex() {
		return index;
	}
	int numdown(unsigned int num) {
		ifstream infile;
		ofstream outfile;
		string str;
		int count = 0;
		int tempnum=0;
		string txt = ".txt";
		string bd = "bd//";
		string resprod;
		resprod = bd + to_string(this->index) + txt;
		infile.open(resprod);
		if (!infile.is_open()) {
			cout << "ошибка открытия файла";
		}
		getline(infile, str);
		infile.close();

		for (int i = 0; str[i] != '\0'; i++) {

			if (str[i] == ';') {
				count++;
			}
			if (str[i] != ';' && count != 6) {
				continue;
			}
			if (str[i] == ';' && count == 6) {
				i++;
				int tempi = i;
				string tempstring;
				while (str[tempi] != '\0') {
					tempstring.push_back(str[tempi]);
					tempi++;
				}
				tempnum = stoi(tempstring);
				if (tempnum < num) {
					cout << "Недостаточно товара на складе"<<endl;
					return -1;
				}
				tempnum-= num;
				str.replace(i, tempstring.size(), to_string(tempnum));
				break;
			}
		}
		outfile.open(resprod);

		if (!outfile.is_open()) {
			cout << "ошибка открытия файла";
		}
		outfile << str;
		outfile.close();
		return 0;
	}

	int numup(unsigned int num) {
		ifstream infile;
		ofstream outfile;
		string str;
		int count = 0;
		int tempnum = 0;
		string txt = ".txt";
		string bd = "bd//";
		string resprod;
		resprod = bd + to_string(this->index) + txt;
		infile.open(resprod);
		if (!infile.is_open()) {
			cout << "ошибка открытия файла";
		}
		getline(infile, str);
		infile.close();

		for (int i = 0; str[i] != '\0'; i++) {

			if (str[i] == ';') {
				count++;
			}
			if (str[i] != ';' && count != 6) {
				continue;
			}
			if (str[i] == ';' && count == 6) {
				i++;
				int tempi = i;
				string tempstring;
				while (str[tempi] != '\0') {
					tempstring.push_back(str[tempi]);
					tempi++;
				}
				tempnum = stoi(tempstring);
				tempnum += num;
				str.replace(i, tempstring.size(), to_string(tempnum));
				break;
			}
		}
		outfile.open(resprod);

		if (!outfile.is_open()) {
			cout << "ошибка открытия файла";
		}
		outfile << str;
		outfile.close();
		return 0;
	}


	string returncategory(unsigned int n) {
		switch (n) {
		case 1: {
			return "milk products";
		}
		case 2: {
			return "drinks";
		}
		case 3: {
			return "snacks";
		}
		case 4: {
			return "alcohol";
		}
		default: {
			return"0";
		}
		}
	}
	string returnSUBcategory(unsigned int n) {
		switch (n) {
		case 1: {
			return "milk";
		}
		case 2: {
			return "juices";
		}
		case 3: {
			return "water";
		}
		case 4: {
			return "cheese";
		}
		default: {
			return"0";
		}
		}
	}
	virtual int addnew(unsigned int ind) {
		return 0;
	};
	virtual int changeinf(unsigned int ind) {
		return 0;
	};
	virtual int delprod(unsigned int ind) {
		return 0;
	}
	
};

class Seller:public Product {
public:
	Seller() {

	}
	int sell(unsigned int indx, unsigned int num) {
		setindex(indx);
		if (numdown(num) == 0) return 0;
		else return -1;
	}
	
};

class SeniorSeller :public Seller {
public:
	SeniorSeller() {

	}
public:
	int returnprod(unsigned int indx, unsigned int num) {
		setindex(indx);
		if (numup(num) == 0) return 0;
		else return -1;
	}

	int addnew(unsigned int ind) override {
		ofstream file2;
		ifstream file;
		string bd = "bd//";
		string txt = ".txt";
		string resprod;
		setindex(ind);
		resprod = bd + to_string(getindex()) + txt;
		try
		{
			file.open(resprod);
			if (file.is_open()) {
				exception inderr("Товар с таким индексом уже существует");
				throw inderr;
			}
		}
		catch (exception& error)
		{
			cout << error.what() <<endl<<endl;
			file.close();
			return -1;
		}
		file.close();
		string newprod;
		string temp;
		int choose;
		newprod = newprod + to_string(getindex())+";";
		try   //выбор категории
		{
			cout << "Выберете категорию:\n\n1 - milk products;\n2 - drinks;\n3 - snacks;\n4 - alcohol;\n=================\n0 - отмена;" << endl<<endl;
			cin >> choose;
			if (choose == 0) {
				exception exit("Операция отменена");
				throw exit;
			}
			if (returncategory(choose) == "0") {
				exception caterr("Выбранной категории несуществует");
				throw caterr;
			}
			temp = returncategory(choose);
			newprod = newprod + temp + ";";
			temp.clear();
		}
		catch (exception&err)
		{
			system("cls");
			if (choose == 0) {
				cout << err.what() << endl << endl;
				return 1;
			}
			cout << err.what() << endl << endl;
			return 2;
		}


		try   //выбор ПОДкатегории
		{
			cout << "Выберете подкатегорию:\n\n1 - milk;\n2 - juices;\n3 - water;\n4 - cheese;\n=================\n0 - отмена;" << endl << endl;
			cin >> choose;
			if (choose == 0) {
				exception exit("Операция отменена");
				throw exit;
			}
			if (returnSUBcategory(choose) == "0") {
				exception caterr("Выбранной категории несуществует");
				throw caterr;
			}
			temp = returnSUBcategory(choose);
			newprod = newprod + temp + ";";
			temp.clear();
		}
		catch (exception& err)
		{
			if (choose == 0) {
				cout << err.what() << endl << endl;
				return 1;
			}
			cout << err.what() << endl << endl;
			return 2;
		}

		//ввод названия
		cout << "Введите название товара (через <<_>>): ";
		cin >> temp;
		newprod = newprod + temp + ";";
		temp.clear();


		//ввод названия компании
		cout << "Введите название компании-производителя (через <<_>>): ";
		cin >> temp;
		newprod = newprod + temp + ";";
		temp.clear();
		
		
		try   //ввод цены
		{
			cout << "Введите цену товара (через <<.>>): ";
			cin >> temp;
			
			if (stod(temp) <=0) {
				exception costerr("Число введено некорректно");
				throw costerr;
			}
			newprod = newprod + temp + ";";
			temp.clear();
		}
		catch (exception& err)
		{
			cout << err.what() << endl << endl;
			return 3;
		}
		

		try   //ввод Количества товара на складе
		{
			cout << "Введите количество товара: ";
			cin >> temp;

			if (stoi(temp) <= 0) {
				exception costerr("Число введено некорректно");
				throw costerr;
			}
			newprod = newprod + temp ;
			temp.clear();
		}
		catch (exception& err)
		{
			cout << err.what() << endl << endl;
			return 3;
		}
		cout << "Успешно добавлено" << endl << endl;
		file2.open(resprod);
		file2 << newprod;
		file2.close();
		newprod.clear();
		temp.clear();
		return 0;
	}
	int delprod(unsigned int ind) override {
		ofstream file2;
		ifstream file;
		string resprod;
		setindex(ind);
		string bd = "bd//";
		string txt = ".txt";
		resprod = bd + to_string(getindex()) + txt;
		try
		{
			if (remove(resprod.c_str())!=0) {
				exception inderr("Товара с таким индексом не существует");
				throw inderr;
			}
		}
		catch (exception& error)
		{
			cout << error.what() << endl << endl;
			file.close();
			return -1;
		}
		file.close();
		cout << "Продукт " << getindex() << " успешно удален" << endl<<endl;

	}
	int changeinf(unsigned int ind) override {
		ofstream file2;
		ifstream file;
		string bd = "bd//";
		string txt = ".txt";
		string resprod;
		
		setindex(ind);
		resprod = bd + to_string(getindex()) + txt;
		try
		{
			file.open(resprod);
			if (!file.is_open()) {
				exception inderr("Товара с таким индексом не существует");
				throw inderr;
			}
		}
		catch (exception& error)
		{
			cout << error.what() << endl << endl;
			file.close();
			return -1;
		}
		string newprod;
		string temp;
		getline(file, temp);
		file.close();
		cout << "Информация о товаре " << getindex() << endl << temp << endl;
		int choose;
		newprod = newprod + to_string(getindex()) + ";";
		try   //выбор категории
		{
			cout << "Выберете новую категорию:\n\n1 - milk products;\n2 - drinks;\n3 - snacks;\n4 - alcohol;\n=================\n0 - отмена;" << endl << endl;
			cin >> choose;
			if (choose == 0) {
				exception exit("Операция отменена");
				throw exit;
			}
			if (returncategory(choose) == "0") {
				exception caterr("Выбранной категории несуществует");
				throw caterr;
			}
			temp = returncategory(choose);
			newprod = newprod + temp + ";";
			temp.clear();
		}
		catch (exception& err)
		{
			if (choose == 0) {
				cout << err.what() << endl << endl;
				return 1;
			}
			cout << err.what() << endl << endl;
			return 2;
		}


		try   //выбор ПОДкатегории
		{
			cout << "Выберете новую подкатегорию:\n\n1 - milk;\n2 - juices;\n3 - water;\n4 - cheese;\n=================\n0 - отмена;" << endl << endl;
			cin >> choose;
			if (choose == 0) {
				exception exit("Операция отменена");
				throw exit;
			}
			if (returnSUBcategory(choose) == "0") {
				exception caterr("Выбранной категории несуществует");
				throw caterr;
			}
			temp = returnSUBcategory(choose);
			newprod = newprod + temp + ";";
			temp.clear();
		}
		catch (exception& err)
		{
			if (choose == 0) {
				cout << err.what() << endl << endl;
				return 1;
			}
			cout << err.what() << endl << endl;
			return 2;
		}

		//ввод названия
		cout << "Введите название товара (через <<_>>): ";
		cin >> temp;
		newprod = newprod + temp + ";";
		temp.clear();


		//ввод названия компании
		cout << "Введите название компании-производителя (через <<_>>): ";
		cin >> temp;
		newprod = newprod + temp + ";";
		temp.clear();


		try   //ввод цены
		{
			cout << "Введите цену товара (через <<.>>): ";
			cin >> temp;

			if (stod(temp) <= 0) {
				exception costerr("Число введено некорректно");
				throw costerr;
			}
			newprod = newprod + temp + ";";
			temp.clear();
		}
		catch (exception& err)
		{
			cout << err.what() << endl << endl;
			return 3;
		}


		try   //ввод Количества товара на складе
		{
			cout << "Введите количество товара: ";
			cin >> temp;

			if (stoi(temp) <= 0) {
				exception costerr("Число введено некорректно");
				throw costerr;
			}
			newprod = newprod + temp;
			temp.clear();
		}
		catch (exception& err)
		{
			cout << err.what();
			return 3;
		}
		cout << newprod<<endl<<endl;
		file2.open(resprod);
		file2 << newprod;
		file2.close();
		newprod.clear();
		temp.clear();
		return 0;
	};

};



int main() {
	setlocale(LC_ALL, "ru");
	ifstream inuserfile;
	ofstream ouserfile;
	string txt = ".txt";
	string users = "users//";
	string resuser;
	int choose;
	int flag = 0;
	while (flag == 0) {
		system("cls");
		cout << "1 - Войти\n2 - Зарегистрироваться\n0 - Выйти\n";
		cin >> choose;
		switch (choose) {
		case 1:
		{
			string log;
			string password;
			string bdpassword;
			unsigned int plas;
			unsigned int bdplas;
			string tempplas;
			Seller* now;
			cout << "Введите логин (без пробелов) -> ";
			cin >> log;
			cout << endl << "Введите пароль -> ";
			cin >> password;
			resuser = users + log + txt;
			try
			{
				inuserfile.open(resuser);
				if (!inuserfile.is_open()) {
					exception userex("Пользователя не существует");
					throw userex;
				}
				else {
					getline(inuserfile, bdpassword);
					getline(inuserfile, tempplas);
					bdplas = stoi(tempplas);
					inuserfile.close();
					if (bdpassword == password) {
						system("cls");
						cout << "Вход произведен успешно"<<endl<<endl;
					}
					else {
						cout << "Неверный пароль" << endl << endl;
						break;
					}
					if (bdplas == 1) {
						int chek;
						int flg = 0;
						Seller sel;
						while (flg == 0) {
							cout << "Продажа -> 1\nВыход -> 0\n" << endl;
							cin >> chek;
							system("cls");
							switch (chek)
							{
							case 1: {
								unsigned int ind;
								unsigned int num;
								cout << "Введите индекс (штрихкод) -> ";
								cin >> ind;
								cout << "\nВведите количество продаваемого товара -> ";
								cin >> num;
								if (sel.sell(ind, num) == 0) {
									cout << endl<<"Успешно продано" << endl<<endl;
								}
								
								break;
							}
							case 0: {
								flg = 1;
								break;
							}
							default:
								cout << "Выберете существующую функцию";
								break;
							}
						}
						break;
					}
					if (bdplas == 2) {
						int chek;
						int flg = 0;
						SeniorSeller sel;
						while (flg == 0) {
							cout << "Продажа -> 1\nВозврат -> 2\nДобаление нового товара -> 3\nУдаление товара из базы данных -> 4\nРедактирование информации о товаре -> 5\nВыход -> 0\n" << endl;
							cin >> chek;
							system("cls");
							switch (chek)
							{
							case 1: {
								unsigned int ind;
								unsigned int num;
								cout << "Введите индекс (штрихкод) -> ";
								cin >> ind;
								cout << "\nВведите количество продаваемого товара -> ";
								cin >> num;
								if (sel.sell(ind, num) == 0) {
									cout << "Успешно продано" << endl<<endl;
								}
								break;
							}
							case 2: {
								unsigned int ind;
								unsigned int num;
								cout << "Введите индекс (штрихкод) -> ";
								cin >> ind;
								cout << "\nВведите количество возвращаемого товара -> ";
								cin >> num;
								if (sel.returnprod(ind, num) == 0) {
									cout <<endl<< "Товар успешно возвращен" << endl<<endl;
								}
								break;
							}
							case 3: {
								unsigned int ind;
								cout << "Введите индекс (штрихкод) -> ";
								cin >> ind;
								sel.addnew(ind);
								break;
							}
							case 4: {
								unsigned int ind;
								cout << "Введите индекс (штрихкод) -> ";
								cin >> ind;
								sel.delprod(ind);
								break;
							}
							case 5: {
								unsigned int ind;
								cout << "Введите индекс (штрихкод) -> ";
								cin >> ind;
								sel.changeinf(ind);
								break;
							}
							case 0: {
								flg = 1;
								break;
							}
							default:
								cout << "Выберете существующую функцию";
								break;
							}
						}
					}
					else {
						exception wrongpw("Неверный пароль");
						throw wrongpw;
					}
				}
			}
			catch (exception& err)
			{
				system("cls");
				cout << err.what()<<endl << endl;

			}
			break;
		}
		case 2: {
			string log;
			string password;
			unsigned int plas;
			Seller* now;
			cout << "Введите логин нового пользователя (без пробелов) -> ";
			cin >> log;
			cout << endl << "Введите пароль -> ";
			cin >> password;
			cout << "Выберете должность:\n1 - Продавец\n2 - Администратор\n";
			cin >> plas;
			resuser = users + log + txt;
			if (plas != 1 && plas != 2) {
				cout << "Должности не существует";
				break;
			}
			try
			{
				inuserfile.open(resuser);
				if (inuserfile.is_open()) {
					exception userex("Пользователь с таким логином уже существует");
					throw userex;
				}
				ouserfile.open(resuser);
				ouserfile << password<<endl<<plas;
				ouserfile.close();
				cout << "Пользователь успешно зарегестрирован" << endl << endl;

			}
			catch (exception&err)
			{
				cout<<err.what();
				inuserfile.close();
			}
			break;
			
		}
		case 0: {
			flag = 1;
			break;
		}
		default: {
			system("cls");
			cout << "Выберете существующий пункт" << endl<<endl;
		}
		}
	}

	return 0;
}
