#include <iostream>
#include <string>
#include <fstream>
#include <iomanip>
#include <sstream>
#include <ctime>
#include <Windows.h>

using namespace std;

class Goodsread
{
protected:
    string product = "Goods.txt", line;
public:
    void print()
    {
        ifstream fileproduct(product);
        if (!fileproduct.is_open())
        {
            cout << "Ошибка открытия файла" << endl;
            exit(0);
        }
        else
        {
            cout << "Файл открыт" << endl;
            while (getline(fileproduct, line))
            {
                cout << line << endl;
            }
        }
        fileproduct.seekg(0, ios::beg);
        fileproduct.close();
    }
};

class AdminLogCheck
{
protected:
    string logs = "LoginData.txt", line;
public:
    void print()
    {
        ifstream filelogs(logs);
        if (!filelogs.is_open())
        {
            cout << "Ошибка открытия файла" << endl;
            exit(0);
        }
        else
        {
            cout << "Файл открыт" << endl;
            while (getline(filelogs, line))
            {
                cout << line << endl;
            }
        }
        filelogs.seekg(0, ios::beg);
        filelogs.close();
    }
};

class AdminLogCheckSearch : AdminLogCheck
{
public:
    void search(string name)
    {
        ifstream filelogs(logs);
        if (!filelogs.is_open())
        {
            cout << "Ошибка открытия файла" << endl;
            exit(0);
        }
        else
        {
            cout << "Файл открыт" << endl;
            while (getline(filelogs, line))
            {
                size_t found = line.find(name);
                if (found != string::npos)
                {
                    cout << line << endl;
                }
            }
        }
        filelogs.seekg(0, ios::beg);
        filelogs.close();
    }
};

class Goodsadd : Goodsread
{
protected:
    int id, category_id, price, quantity;
    string product_name, date;
public:
    void productadd()
    {
        ofstream fileproduct(product, ios::app);
        if (!fileproduct.is_open())
        {
            cout << "Ошибка открытия файла" << endl;
            exit(0);
        }
        else
        {
            cout << "Файл открыт" << endl;
            cout << "Введите id товара" << endl;
            cin >> id;
            cout << "Введите название товара" << endl;
            cin >> ws;
            getline(cin, product_name);
            cout << "Введите id категории товара товара (1 - коплектующие для ПК, 2 - бытовая техника, 3 - Ноутбуки и перифирия, 4 - ТВ, консоли и аудио)" << endl;
            cin >> category_id;
            cin >> price;
            cin >> quantity;
            cin >> date;
            fileproduct << setw(5) << id << " | "
                << setw(35) << product_name << " | "
                << setw(9) << category_id << " | "
                << setw(10) << price << "р." << " | "
                << setw(9) << quantity << "шт." << " | "
                << setw(5) << date << " | " << endl;
        }
        fileproduct.close();
    }
};

class Goodssearch : public Goodsread
{
public:
    void search(string date)
    {
        ifstream fileproduct(product);
        if (!fileproduct.is_open())
        {
            cout << "Ошибка открытия файла" << endl;
            exit(0);
        }
        else
        {
            cout << "Файл открыт" << endl;
            while (getline(fileproduct, line))
            {
                size_t found = line.find(date);
                if (found != string::npos)
                {
                    cout << line << endl;
                }
            }
        }
        fileproduct.seekg(0, ios::beg);
        fileproduct.close();
    }
};

int main()
{
    int menu = 1;
    setlocale(LC_ALL, "RUS");
    SetConsoleCP(1251);
    SetConsoleOutputCP(1251);
    string loginandpassword, checkline, line;
    string logbase = "Login.txt";
    string logindata = "LoginData.txt";
    int log = 0,status = 0;
    do
    {
        cout << "Введите Логин:Пароль" << endl;
        cin >> loginandpassword;

        ifstream file(logbase);
        if (!file.is_open())
        {
            cout << "Ошибка открытия файла" << endl;
            return 0;
        }
        else
        {
            cout << "Файл открыт" << endl;
            bool password_matched = false;
            while (getline(file, checkline))
            {
                if (loginandpassword == checkline)
                {
                    cout << "Пароль Верный" << endl;
                    log = 1;
                    getline(file, line);
                    if (line == "admin")
                    {
                        status = 1;
                    }
                    else
                    {
                        status = 2;
                    }
                    password_matched = true;
                    // записываем дату и время входа пользователя
                    SYSTEMTIME st;
                    GetLocalTime(&st); 
                    ofstream logfile(logindata, ios::app);
                    logfile << st.wYear << "-" << st.wMonth << "-" << st.wDay << " " << st.wHour << ":" << st.wMinute << ":" << st.wSecond << " " << loginandpassword << endl;
                    logfile.close();
                    system("pause");
                    break;
                }
            }
            if (!password_matched)
            {
                cout << "Неверный пароль. Хотите попробовать еще раз? (Y/N)" << endl;
                char choice;
                cin >> choice;
                if (choice == 'N' || choice == 'n')
                {
                    return 0;
                }
                system("cls");
            }
        }
        file.close();
    } while (log == 0);
    
    while (menu > 0)
    {
        system("cls");
        if (status == 1)
        { 
            cout << "Введите 1 для вывода базы данных в консоль" << endl << "Введите 2 для добавление нового товара в базу данных" << endl << "Введите 3 для поиска товара по дате заказа" << endl
                << "Введите 4 для добавления нового пользователя" << endl << "Введите 5 для просмотра журнала входов" << endl;
            cin >> menu;
            system("cls");
            switch (menu)
            {
            case 1:
            {
                Goodsread* newgoodsread = new Goodsread();
                newgoodsread->print();
                system("pause");
                system("cls");
                break;
            }
            case 2:
            {
                Goodsadd* newgoodsadd = new Goodsadd();
                newgoodsadd->productadd();
                system("pause");
                system("cls");
                break;
            }
            case 3:
            {
                string date;
                Goodssearch* newgoodssearch = new Goodssearch();
                cout << "введите дату закупки товара";
                cin >> date;
                newgoodssearch->search(date);
                system("pause");
                system("cls");
                break;
            }
            case 4:
            {
                string newlogin, newstatus;
                ofstream file(logbase, ios::app);
                if (!file.is_open())
                {
                    cout << "Ошибка открытия файла" << endl;
                    exit(0);
                }
                else
                {
                    cin >> ws;
                    getline(cin, newlogin);
                    cin >> ws;
                    getline(cin, newstatus);
                    cout << "Файл открыт" << endl;
                    file << newlogin << endl << newstatus << endl;
                }
                file.close();
                system("pause");
                system("cls");
                break;
            }
            case 5:
            {
                int choice;
                cout << "Введите 1 для просмотра всех результатов, 2 для поиска по пользователю" << endl;
                cin >> choice;
                cin.ignore();
                if (choice == 2)
                {
                    string name;
                    getline(cin, name);
                    AdminLogCheckSearch* newadminlogchecksearch = new AdminLogCheckSearch();
                    newadminlogchecksearch->search(name);
                    system("pause");
                    system("cls");
                }
                else
                {
                    AdminLogCheck* newadminlogcheck = new AdminLogCheck();
                    newadminlogcheck->print();
                    system("pause");
                    system("cls");
                }
                break;
            }
            default:
            {
                menu = 0;
                break;
            }
            }
        }
        else if (status == 2)
        {

            cout << "Введите 1 для вывода базы данных в консоль" << endl << "Введите 2 для добавление нового товара в базу данных" << endl << "Введите 3 для поиска товара по дате заказа" << endl;
            cin >> menu;
            system("cls");            
            switch (menu)
            {
            case 1:
            {
                Goodsread* newgoodsread = new Goodsread();
                newgoodsread->print();
                system("pause");
                system("cls");
                break;
            }
            case 2:
            {
                Goodsadd* newgoodsadd = new Goodsadd();
                newgoodsadd->productadd();
                system("pause");
                system("cls");
                break;
            }
            case 3:
            {
                string date;
                Goodssearch* newgoodssearch = new Goodssearch();
                cout << "Введите дату закупки товара" << endl;
                cin >> date;
                newgoodssearch->search(date);
                system("pause");
                system("cls");
                break;
            }
            default:
            {
                menu = 0;
                break;
            }
            }
        }
    }
    system("cls");
}
